# -*- coding: utf-8 -*-
"""Movie Recommendation System.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11GwvO_-Su_wTyqxNPMD58h5alB78vfYu
"""

from google.colab import drive
drive.mount('/content/drive')

"""The dataset can be found at : https://drive.google.com/file/d/1RsCmZak9Utq6643_mUind9CTcTI636xm/view?usp=sharing

# *`Importing the dependencies`*
"""

import numpy as np
import pandas as pd
import difflib
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import seaborn as sb

"""# *`Data Collection and Pre-Processing`*"""

# loading the data from the csv file to apandas dataframe
MovieData = pd.read_csv('/content/drive/MyDrive/movies.csv')

# printing the first 5 rows of the dataframe
MovieData.head()

"""# *`Data Visualization using Seaborn`*"""

flatui = ["#F07059"]
sb.set_palette(flatui)
sb.pairplot(MovieData)

# number of rows and columns in the data frame

MovieData.shape

# selecting the relevant features for recommendation

SelectedFeatures = ['genres','keywords','tagline','cast','director']
print(SelectedFeatures)

# replacing the null valuess with null string

for feature in SelectedFeatures:
  MovieData[feature] = MovieData[feature].fillna('')

# combining all the 5 selected features

CombinedFeatures =MovieData['genres']+' '+MovieData['keywords']+' '+MovieData['tagline']+' '+MovieData['cast']+' '+MovieData['director']

print(CombinedFeatures)

# converting the text data to feature vectors

vectorizer = TfidfVectorizer()

FeatureVectors = vectorizer.fit_transform(CombinedFeatures)

print(FeatureVectors)

"""Cosine Similarity"""

# getting the similarity scores using cosine similarity

Similarity = cosine_similarity(FeatureVectors)

print(similarity)

print(Similarity.shape)

"""Getting the movie name from the user"""

# getting the movie name from the user

MovieName = input(' Enter your favourite movie name : ')

# creating a list with all the movie names given in the dataset

list_of_all_titles = MovieData['title'].tolist()
print(list_of_all_titles)

# finding the close match for the movie name given by the user

find_close_match = difflib.get_close_matches(MovieName, list_of_all_titles)
print(find_close_match)

close_match = find_close_match[0]
print(close_match)

# finding the index of the movie with title

index_of_the_movie = MovieData[MovieData.title == close_match]['index'].values[0]
print(index_of_the_movie)

# getting a list of similar movies

similarity_score = list(enumerate(Similarity[index_of_the_movie]))
print(similarity_score)

len(similarity_score)

# sorting the movies based on their similarity score

sorted_similar_movies = sorted(similarity_score, key = lambda x:x[1], reverse = True) 
print(sorted_similar_movies)

# print the name of similar movies based on the index

print('Movies suggested for you : \n')

i = 1

for movie in sorted_similar_movies:
  index = movie[0]
  title_from_index = MovieData[MovieData.index==index]['title'].values[0]
  if (i<30):
    print(i, '.',title_from_index)
    i+=1

"""Movie Recommendation Sytem"""

movie_name = input(' Enter your favourite movie name : ')

list_of_all_titles = MovieData['title'].tolist()

find_close_match = difflib.get_close_matches(movie_name, list_of_all_titles)

close_match = find_close_match[0]

index_of_the_movie = MovieData[MovieData.title == close_match]['index'].values[0]

similarity_score = list(enumerate(similarity[index_of_the_movie]))

sorted_similar_movies = sorted(similarity_score, key = lambda x:x[1], reverse = True) 

print('Movies suggested for you : \n')

i = 1

for movie in sorted_similar_movies:
  index = movie[0]
  title_from_index = MovieData[MovieData.index==index]['title'].values[0]
  if (i<30):
    print(i, '.',title_from_index)
    i+=1